{"number":102,"issue":"8046092","related":[279],"depends":[],"created":"2011/09/01 20:00","release":"9","name":" Process API Updates","discussion":"core dash libs dash dev at openjdk dot java dot net","projectIds":[],"body":"Summary Improve the API for controlling and managing operating-system processes. Motivation The limitations of the current API often force developers to resort to native code. Description Java SE provides limited support for native operating-system processes. It provides a basic API to setup the environment and start a process. The process streams can, since Java SE 7, be redirected to files, pipes, or can be inherited. Once started, the API can be used to destroy the process and/or wait for the process to terminate. The java.lang.Process class is enhanced to provide the operating specific process id of the process, information about the process including the arguments, the command, the start time of the process, the accumulated cpu time of the process and the user name for the process. The java.lang.ProcessHandle class returns information about each process as provided by the operating system including process id, arguments, command, start time, etc. A ProcessHandle can return the process' parent, and the direct children, and to all descendants via a stream of ProcessHandles. ProcessHandles can be used to destroy processes and monitor process liveness. With ProcessHandle.onExit, the asynchronous mechanisms of CompletableFuture can be used to schedule an action to be taken when the process exits. Access to information about processes and control of processes is subject to security manager permissions and are limited by the normal operating system access controls. Testing The classes or methods introduced will require new unit tests that can be developed along with the implementation. More functional tests would be useful too. Risks and Assumptions The main risk with this API is differences between operating systems, in particular Windows. The design of this API needs to accommodate possible deployment on smaller devices with different operating system models. It should also take into account environments where multiple Java virtual machines are running in the same operating system process. These considerations could lead to a more abstract API and/or increase the design effort.","updated":"2017/03/09 09:08","status":"Closed\u2009/\u2009Delivered"}