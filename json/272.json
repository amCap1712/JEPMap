{"number":272,"issue":"8048731","related":[],"depends":[],"created":"2014/06/30 15:52","release":"9","name":" Platform-Specific Desktop Features","discussion":"awt dash dev at openjdk dot java dot net","projectIds":[],"body":"Summary Define a new public API to access platform-specific desktop features such as interacting with a task bar or dock, or listening for system or application events. Goals In the forthcoming release of JDK 9, internal APIs such as those in the Mac OS X com.apple.eawt package will no longer be accessible. The goal of this JEP is to provide suitable replacements for these inaccessible APIs and, also, introduce related platform-specific features. We plan to implement the new features on those platforms that have the necessary support. Where feasible, the API will be designed to be cross-platform so that each feature can be implemented on as wide a range of platforms as possible. apple.applescript classes are being removed without providing any replacement. Non-Goals We do not intend to provide direct replacements for all of the internal OS X APIs present in JDK 8. Specifically, we will not provide a replacement for the com.apple.concurrent package. Is it also not a goal to maintain compatibility with those internal APIs for which we do provide substitutes. Description This JEP contains two sub-tasks: Provide public API to replace the functionality in com.apple.{eawt,eio} The intent of this subtask is to avoid loss of functionality for OS X developers. We will provide replacements for the APIs in the JDK-internal com.apple.eawt and com.apple.eio packages. Provide access to similar features on other platforms In addition to features specific to OS X, there are similar features that can be supported on other platforms, including Windows and Linux: Login/logout and screen lock handlers: Provide event listeners on system login/logout (or screen lock/unlock) to allow an application to start a persistent task or save its state when needed. Task bar/dock interactions Request user attention: Allow an application to request the attention of the user, using platform capabilities such as blinking the application icon in the taskbar or bouncing the icon in the dock. Indicate task progress: Display a progress bar or other indicator in the task bar/dock. Action shortcuts: Provide action shortcuts that are accessible by a pop-up menu, for example, Windows jump-lists. Support for these features will be determined by platform capabilities. API We propose to add the public API for these two sub-tasks to the existing java.awt.Desktop class. The target supported platforms are Mac OS X, Windows, Linux. Proposed API sketch: package java.awt;\n\npublic class Desktop {\n\n    /* ... */\n\n    /**\n     * Adds sub-types of {@link AppEventListener} to listen for notifications\n     * from the native system.\n     *\n     * @param listener\n     * @see AppForegroundListener\n     * @see AppHiddenListener\n     * @see AppReOpenedListener\n     * @see AppScreenSleepListener\n     * @see AppSystemSleepListener\n     * @see AppUserSessionListener\n     */\n\n    public void addAppEventListener(final AppEventListener listener) {}\n\n    /**\n     * Requests user attention to this application (usually through bouncing the Dock icon).\n     * Critical requests will continue to bounce the Dock icon until the app is activated.\n     *\n     */\n    public void requestUserAttention(final boolean critical) {}\n\n    /**\n     * Attaches the contents of the provided PopupMenu to the application's Dock icon.\n     */\n    public void setDockMenu(final PopupMenu menu) {}\n\n    /**\n     * Changes this application's Dock icon to the provided image.\n     */\n    public void setDockIconImage(final Image image) {}\n\n\n    /**\n     * Affixes a small system provided badge to this application's Dock icon. Usually a number.\n     */\n    public void setDockIconBadge(final String badge) {}\n\n    /**\n     * Displays or hides a progress bar or other indicator in\n     * the dock.\n     *\n     * @see DockProgressState.NORMAL\n     * @see DockProgressState.PAUSED\n     * @see DockProgressState.ERROR\n     *\n     * @see #setDockProgressValue\n     */\n    public void setDockProgressState(int state) {}\n\n    /**\n     * Sets the progress bar's current value to {@code n}.\n     */\n    public void setDockProgressValue(int n) {}\n\n    /**\n     * Tests whether a feature is supported on the current platform.\n     */\n\n    public boolean isSupportedFeature(Feature f) {}\n\n    /* ... */\n} Testing Testing will be limited to additional manual tests written to use the new API. Tests will need to check whether the new features are supported on platforms where they are expected to be supported, and that they fail gracefully on platforms with no support.","updated":"2017/06/28 15:03","status":"Closed\u2009/\u2009Delivered"}