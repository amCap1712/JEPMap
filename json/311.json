{"number":311,"issue":"8178442","related":[343],"depends":[],"created":"2017/04/11 16:07","name":" Java Packager API & CLI","discussion":"jdk dash dev at openjdk dot java dot net","projectIds":[],"body":"Summary Create a new, long-term API and CLI for the Java Packager. Motivation The Java Packager API is not currently documented or supported. It is used by build tools such as ant-javafx.jar, and by Gradle and Maven plugins. Currently they use an API that is located in the packages: com.oracle.tools.packager\ncom.sun.javafx.tools.packager\ncom.sun.javafx.tools.packager.bundlers\ncom.sun.javafx.tools.resource The API is far too broad. It should be more consistent with the platform, and no longer export com.sun.* or com.oracle.* packages. These are all deprecated in JDK 10 and will be removed in JDK 11. All package names should share a common prefix. Every option should be available via the CLI. The current Java Packager CLI is not intuitive, not consistent with other Java tools, and not all features are accessible. The Java Packager needs to provide a new CLI that exposes all features, and is available via a ToolProvider. Description ant-javafx.jar will be deprecated, and replaced with ant-java.jar, which uses the new ToolProvider API and and changes all scopes from \"fx\" to \"packager\". The Java Packager will be accessible by a ToolProvider in a manner similar to the javac compiler and the jdeps tool. Java Web Start support(JNLP files) will be removed in the new CLI. CLI arguments For backward compatibility, existing CLI arguments will be left as-is for JDK 10, and refactored into a method that can be removed later. The CLI will be reworked to be simpler and expose all Java Packager features. Argument syntax will be more robust, and support one of four options: -name=value\n-name value\n--name=value\n--name value New CLI arguments NOTE: This is just a preliminary list of arguments. These are the first order arguments that determine what the operation that the Java Packager will be performing: -create-image\n-create-installer -create-image -verbose\n-name\n--module\n--module-path\n--add-modules\n--limit-modules\n-icon\n-outdir <directory>\n--strip-native-commands <true/false>\n-title\n-vendor\n-description\n-category\n-copyright\n-license\n-secondaryLauncher.name\n-secondaryLauncher.module\n-secondaryLauncher.mainclass\n-srcdir\n-srcfiles\n-version\n-mainclass\n-classpath\n-mainJar/-appclass\n-daemon\n-preloader\n-jvmargs <name,value>(:<name,value>)*\n-jvmuserargs <name,value>(:<name,value>)*\n-daemon/-service\n-BapplicationCategory=\n-BappVersion=\n-Bmac.CFBundleIdentifier=\n-Bmac.category=\n-Bmac.CFBundleVersion=\n-BsignBundle=false\n-mac.file.associations <extension,\"description\">(:<extension,\"description\">)*\n-default-arguments <value>(:<value>)*\n-Bicon.png -create-installer -Bmac.dmg.simple=true\n-file.associations <extension,\"description\">(:<extension,\"description\">)*\n-BsignBundle=false\n-Bmac.app-store-entitlements=<filename>\n-installdirChooser\n-Bwin.menuGroup\n-Bwin.64Bit\n-Bwin.64BitJreRuntime\n-Bwin.registryName\n-Bwin.installerName\n-Blinux.bundleName\n-Blinux.deb.fullPackageName\n-Blinux.deb.imageDir\n-Blinux.deb.imageRoot\n-Blinux.deb.configDir\n-Blinux.deb.maintainer\n-Blinux.deb.licenseText\n-Blinux.xdg-prefix Configuration-file support There will be support similar to java.exe, to pass all arguments via a configuration file. This will be a properties file.","updated":"2018/04/05 20:22","status":"Closed\u2009/\u2009Withdrawn"}