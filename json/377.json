{"number":377,"issue":"8209683","related":[364,333,365,351],"depends":[],"created":"2018/08/20 06:16","release":"15","name":" ZGC: A Scalable Low-Latency Garbage Collector (Production)","discussion":"hotspot dash gc dash dev at openjdk dot java dot net","projectIds":[],"body":"Summary Change the Z Garbage Collector from an experimental feature into a product feature. Non-Goals This JEP does not propose to change the default GC, which remains G1. Motivation ZGC was integrated into JDK 11 by JEP 333. New features of such size and complexity are best introduced carefully and gradually, so we made it an experimental feature. This helped set user expectations and allowed users to provide feedback without having to download or build a separate JDK binary, which would have been the case if ZGC development had continued outside of the JDK. Since its introduction in JDK 11 we\u2019ve received positive feedback, we\u2019ve ironed out many bugs, and we\u2019ve added a number of features and enhancements. To highlight some of the more important ones: Concurrent class unloading Uncommitting unused memory (JEP 351) Maximum heap size increased from 4TB to 16TB Minimum heap size decreased to 8MB -XX:SoftMaxHeapSize Support for the JFR leak profiler Support for class-data sharing Limited and discontiguous address spaces Support for placing the heap on NVRAM Improved NUMA awareness Multi-threaded heap pre-touching Furthermore, all commonly used platforms are now supported: Linux/x86_64 (JEP 333) Linux/aarch64 (8214527) Windows (JEP 365) macOS (JEP 364) Testing of ZGC suggests that it is stable and, as of this writing, we have received no new ZGC-specific bugs for a few months. With the stability, feature set, and platform support that ZGC has today, it is time to remove its experimental status and make it a product feature. Description ZGC is enabled today via the -XX:+UnlockExperimentalVMOptions -XX:+UseZGC command-line options. Making ZGC a product (non-experimental) feature means that the -XX:+UnlockExperimentalVMOptions option will no longer be needed. Turning ZGC into a product (non-experimental) feature is mainly a matter of changing the UseZGC command-line option type from experimental to product. In addition, we will also change the following ZGC-specific options, currently marked experimental, to product. We will not change the default values for these options. ZAllocationSpikeTolerance\nZCollectionInterval\nZFragmentationLimit\nZMarkStackSpaceLimit\nZProactive\nZUncommit\nZUncommitDelay The following ZGC-specific JFR events, currently marked experimental, will also be changed to product. ZAllocationStall\nZPageAllocation\nZPageCacheFlush\nZRelocationSet\nZRelocationSetGroup\nZUncommit Testing Testing of ZGC was added as part of JEP 333, and additional tests have been added since then. No additional tests will be developed as part of this JEP. Some tests currently supply the -XX:+UnlockExperimentalVMOptions command-line option when enabling ZGC. This will no longer be needed, and these tests will be adjusted accordingly.","updated":"2021/10/06 17:26","status":"Closed\u2009/\u2009Delivered"}