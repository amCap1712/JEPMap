{"number":256,"issue":"8044826","related":[],"depends":[],"created":"2014/06/04 16:07","release":"9","name":" BeanInfo Annotations","discussion":"beans dash dev at openjdk dot java dot net","projectIds":[],"body":"Summary Replace @beaninfo Javadoc tags with proper annotations, and process those annotations at run time to generate BeanInfo classes dynamically. Motivation Simplify the creation of custom BeanInfo classes and enable the modularization of the client library. Description Most BeanInfo classes are automatically generated at runtime, but many Swing classes still generate BeanInfo classes from @beaninfo Javadoc tags at compile time. We propose to replace the @beaninfo tags with the following annotations, and extend the existing introspection algorithm to interpret them: package java.beans;\npublic @interface JavaBean {\n    String description() default \"\";\n    String defaultProperty() default \"\";\n    String defaultEventSet() default \"\";\n}\n\npackage java.beans;\npublic @interface BeanProperty {\n    boolean bound() default true;\n    boolean expert() default false;\n    boolean hidden() default false;\n    boolean preferred() default false;\n    boolean visualUpdate() default false;\n    String description() default \"\";\n    String[] enumerationValues() default {};\n}\n\npackage javax.swing;\npublic @interface SwingContainer {\n    boolean value() default true;\n    String delegate() default \"\";\n} For further detail, see the Javadoc for JavaBean, BeanProperty, and SwingContainer. These annotations will set the corresponding feature attributes during BeanInfo generation at run time. It will be easier for developers to specify these attributes directly in Bean classes rather than create a separate BeanInfo class for every Bean class. It will also allow the removal of the automatically-generated classes, which will make it easier to modularize the client library. Testing We'll need to verify that the new introspection algorithm behaves as expected. We'll also need to verify that the new introspection algorithm doesn't break backward compatibility, or else ensure that cases in which compatibility is broken are rare. Risks and Assumptions The new introspection algorithm may behave somewhat differently, but we do not expect any serious backward incompatibilities. We do not expect any performance degradation. The refactoring of the introspection algorithm might improve performance.","updated":"2017/02/23 16:49","status":"Closed\u2009/\u2009Delivered"}